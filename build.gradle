buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

//plugins {
//    id "org.flywaydb.flyway" version "3.2"
//}

//flyway {
//    url = 'jdbc:h2:mem:testdb'
//    user = 'sa'
//}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

jar {
    baseName = 'demo'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {

    compile('org.projectlombok:lombok')
    compile('joda-time:joda-time')

    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-devtools")

    runtime('com.h2database:h2')
    compile('postgresql:postgresql:9.1-901-1.jdbc4')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.dbunit:dbunit:2.5.1')
    testCompile('com.github.springtestdbunit:spring-test-dbunit:1.2.1')

    testCompile 'com.jayway.restassured:rest-assured:2.8.0'
    testCompile 'com.jayway.restassured:spring-mock-mvc:2.8.0'


}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.M3"
    }
}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}


pmd {
    ignoreFailures =true
    ruleSetFiles = files('config/pmd/ruleSet.xml')
}

//check << {
//    File outDir = new File('build/reports/pmd/')
//    outDir.mkdirs()
//    ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
//            classpath: configurations.pmd.asPath)
//    ant.cpd(minimumTokenCount: '100', format: 'xml',
//            outputFile: new File(outDir, 'cpd.xml')) {
//        fileset(dir: "src/main/java") {
//            include(name: '**/*.java')
//        }
//    }
//}

tasks.withType(FindBugs) {
    ignoreFailures =true

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

